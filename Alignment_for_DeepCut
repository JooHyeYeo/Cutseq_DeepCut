
def def_HammingDistance(n, m):
    #from scipy.spatial.distance import hamming
    hamming_distance = int(hamming(list(n), list(m)) * len(n))
    #print(hamming_distance)
    return hamming_distance

def def_EditDistance(x, y):
    # Create distance matrix
    D = []
    for i in range(len(x)+1):
        D.append([0]*(len(y)+1))
    # Initialize first row and column of matrix
    for i in range(len(x)+1):
        D[i][0] = i
    for i in range(len(y)+1):
        D[0][i] = i
    # Fill in the rest of the matrix
    for i in range(1, len(x)+1):
        for j in range(1, len(y)+1):
            distHor = D[i][j-1] + 1
            distVer = D[i-1][j] + 1
            if x[i-1] == y[j-1]:
                distDiag = D[i-1][j-1]
            else:
                distDiag = D[i-1][j-1] + 1
            D[i][j] = min(distHor, distVer, distDiag)
    # Edit distance is the value in the bottom right corner of the matrix
    return D[-1][-1]

def def_making_aligned_pattern(each_aligned_target, each_aligned_GN19):
    list_aligned_pattern = []
    for idx in range(0, len(each_aligned_target)):
        if each_aligned_target[idx] == '-':
            list_aligned_pattern.append('R')
        elif each_aligned_GN19[idx] == '-':
            list_aligned_pattern.append('D')
        elif ((each_aligned_target[idx] != '-') and (each_aligned_GN19[idx] != '-')):
            if each_aligned_target[idx] == each_aligned_GN19[idx]:
                list_aligned_pattern.append('|')
            elif each_aligned_target[idx] != each_aligned_GN19[idx]:
                list_aligned_pattern.append('M')
    aligned_pattern = ''.join(list_aligned_pattern)
    #print(each_aligned_target)
    #print(aligned_pattern)
    #print(each_aligned_GN19)
    return aligned_pattern



def align(file):


    print(file, 'start')
    df = pd.read_pickle('path')
    ene = df.copy()
    ene = ene.set_index('Target')
    # ene['sgtg'] = ene['sgRNA'] + ene['Target']
    # ene = ene.set_index('sgtg')
    ene = ene.reset_index()
    print('energy file')

    dic = {}
    for idx in ene.index:
        tg = ene.loc[idx, 'Target'].upper() # 'Target'으로
        sg = ene.loc[idx, 'sgRNA'].upper()
        tgsg = tg+sg

        gh = ene.loc[idx, 'opti_deltaGH']
        mfe = ene.loc[idx, 'MFE_GN19']
        mfe1 = ene.loc[idx, 'MFE_GN19_scaffold']

        dic[tgsg] = []
        dic[tgsg].append(gh)
        dic[tgsg].append(mfe)
        dic[tgsg].append(mfe1)

    print('energy dic')


    df = pd.read_pickle('path')
    # df = pd.read_pickle('path')
    # print(nnn, file, 'open')

    df = df.set_index('Target')
    df = df.reset_index()


    for idx in df.index:
        sg = df.loc[idx, 'sgRNA']
        tg = df.loc[idx, 'WT_Target']
        sg = tg[:23-int(gn)] +'G'+ sg + tg[-11:] # tg[1] 대신 'G' 해도 된다.
        # GN19 : 4, GN18 : 5, GN17 : 6, GN16 : 7
        df.loc[idx, 'sgRNA2'] = sg


    align_lst = []

    for idx in df.index:
        sg = df.loc[idx, 'sgRNA2'].upper()

        target = df.loc[idx, 'Target'].upper()
        wttg = df.loc[idx, 'WT_Target'].upper()
        tg = target.upper()
        
        pam = target[-11:-8]
        last_tg = target[-8:]
        sg20 = tg[23-int(gn)] # GN19 : 4, GN18 : 5, GN17 : 6, GN16 : 7

        sgrna = df.loc[idx, 'sgRNA']
        wttg = df.loc[idx, 'WT_Target']
        wtsg = df.loc[idx, 'WT_sgRNA']
        gi = df.loc[idx, 'Guide_Info']
        tt = df.loc[idx, 'Target_Type']
        gt = df.loc[idx, 'Guide_Type']
        tm = df.loc[idx, 'Target_mutation']
        # dn = df.loc[idx, 'Cut']
        # gh = df.loc[idx, 'UnCut']
        # mfe = df.loc[idx, 'CI']
        # mfe2 = df.loc[idx, 'MFE_GN19_scaffold']
        sgwt = 'G' + sgrna.upper() + wttg.upper()

        list_alignments= []

        for alignments in pairwise2.align.globalms(tg, sg, match = 1, mismatch = -1.5, open = -4.21, extend = -4.20):

            ali = []
            ali.append(alignments[0])
            ali.append(alignments[1])
            ali.append(pam)
            ali.append(last_tg)
            ali.append(sg20)

            ali.append(target) # 추가
            ali.append(sgrna)
            ali.append(wttg)
            ali.append(wtsg)
            ali.append(gi)
            ali.append(tt)
            ali.append(gt)
            ali.append(tm)
            # ali.append(dn)
            ali.append(sgwt) # 추가
            # ali.append(dn)
            # ali.append(gh)
            # ali.append(mfe)
            # ali.append(format_alignment(*alignments))

            align_lst.append(ali)

    # print(alignments[0])
    print('finish alignment')


    final = pd.DataFrame(align_lst)
    final.columns = ['Aligned_Target', 'Aligned_sgRNA', 'PAM', 'Target[-9:]', 'Target20','Target', 'sgRNA', 'WT_Target', 'WT_guide', 'Guide_Info', 'Target_Type1', 'Guide_Type', 'Target_mutation', 'sg+WT'] #, 'opti_deltaGH', 'MFE_GN19', 'MFE_GN19_scaffold']

    ff = final.copy()
    final = pd.DataFrame()
    #%%

    for idx in ff.index:
        tg = ff.loc[idx, 'Aligned_Target']
        # tg = tg[4:]
        sg = ff.loc[idx, 'Aligned_sgRNA']
        # sg = sg[4:]

        target = ''

        for i in range(0, len(tg)):
            if tg[i] == sg[i]:
                target += '|'
            elif tg[i] == '-' and sg[i] == '-':
                target += '|'
            elif tg[i] == '-':
                target += 'R'
            elif sg[i] == '-':
                target += 'D'
            else:
                target += 'M'

        ff.loc[idx, 'Alignment'] = target
        ff.loc[idx, 'Counting_Align'] = target[24-int(gn):-11] #GN19 : 5, GN18 : 6, GN17 : 7, GN16 : 8
        
    print('finish counting')

    #%%
    aa = ff.copy()

    for idx in aa.index:
        pam = aa.loc[idx, 'PAM']
        pam = pam[-2:]

        if pam == 'GG':
            aa.loc[idx, 'PAM_MUT'] = 0
        else:
            aa.loc[idx, 'PAM_MUT'] = 1 

    print('PAM mut')

    #%%

    for idx in aa.index:
        ali = aa.loc[idx, 'Alignment']
        rali = ali[24-int(gn):-11] #GN19 : 5, GN18 : 6, GN17 : 7, GN16 : 8
        # rali = ali[1:]
        aa.loc[idx, 'Counting_Alignment'] = rali



    for idx in aa.index:
        ali = aa.loc[idx, 'Counting_Alignment']
        ll = len(ali)

        mm = 0
        rb = 0
        db = 0

        for i in range(0,ll):
            if ali[i] == '|':
                pass
            elif ali[i] == 'M':
                mm += 1
            elif ali[i] == 'R':
                rb += 1
            elif ali[i] == 'D':
                db += 1
            else:
                pass
        
        aa.loc[idx, 'MM_NUM'] = mm
        aa.loc[idx, 'RB_NUM'] = rb
        aa.loc[idx, 'DB_NUM'] = db
        
    print('counting')

    #%%

    for idx in aa.index:
        tg = aa.loc[idx, 'Target'].upper()
        sg = aa.loc[idx, 'sgRNA'].upper()
        tgsg = tg+sg
        
        if tgsg in dic:

            gh = dic[tgsg][0]
            mfe = dic[tgsg][1]
            mfe1 = dic[tgsg][2]

            aa.loc[idx, 'opti_deltaGH'] = gh
            aa.loc[idx, 'MFE_GN19'] = mfe
            aa.loc[idx, 'MFE_GN19_scaffold'] = mfe1
        else:
            pass
        
    print('add energy')

    #%%

    dd = aa.copy()

    for idx in dd.index:
        ali = dd.loc[idx, 'Alignment']
        ali = ali[23-int(gn):-11] # GN19 : 4, GN18 : 5, GN17 : 6, GN16 : 7
        
        sg = dd.loc[idx, 'sgRNA'].upper()
        
        tg = dd.loc[idx, 'Aligned_Target'].upper()
        tg = tg[23-int(gn):-11] # GN19 : 4, GN18 : 5, GN17 : 6, GN16 : 7

        ali_seq = ''

        for i in range(0, len(ali)):
            if ali[i] == '|':
                ali_seq += tg[i]
            else:
                pass

        dd.loc[idx, 'Matched_SEQ'] = ali_seq

    #%%


    for idx in dd.index:
        mat = dd.loc[idx, 'Matched_SEQ']
        dr = mt.Tm_NN(mat, nn_table=mt.R_DNA_NN1)
        dd.loc[idx, 'sgRNA_Target_Tm'] = dr
        
    print('tm calculated')



    aa = dd.copy()

    for idx in aa.index:

        tg = aa.loc[idx, 'Aligned_Target'].upper()
        tg = tg[23-int(gn):-11] #%% GN19: 4, GN18:5, GN17:6, GN16:7

        sg = 'G'+ aa.loc[idx, 'sgRNA'].upper()

        aa.loc[idx,'Tm_Spacer'] = mt.Tm_NN(sg, nn_table=mt.RNA_NN1)
        aa.loc[idx, 'Tm_ProtoSpacer'] = mt.Tm_NN(tg, nn_table=mt.DNA_NN1)
        aa.loc[idx, 'sgRNA'] = sg
        
    print('tm2')

