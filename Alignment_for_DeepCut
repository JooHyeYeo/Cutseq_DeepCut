import pandas as pd
from Bio import pairwise2
from Bio.SeqUtils import MeltingTemp as mt
from concurrent.futures.process import ProcessPoolExecutor
import os


def align_and_feature_for_DeepCut(file_name, gn): 
    # gn : int, from 16 to 19

    df = pd.read_csv('path1_{}'.format(file_name))  # path1 = 'path of files after calculating gh and mfe'
    ene = df.copy()
    ene = ene.set_index('Target')
    ene = ene.reset_index()

    dic = {}
    for idx in ene.index:
        tg = ene.loc[idx, 'Target'].upper()
        sg = ene.loc[idx, 'sgRNA'].upper()
        tgsg = tg+sg

        gh = ene.loc[idx, 'opti_deltaGH']
        mfe = ene.loc[idx, 'MFE_GN19']
        mfe1 = ene.loc[idx, 'MFE_GN19_scaffold']

        dic[tgsg] = []
        dic[tgsg].append(gh)
        dic[tgsg].append(mfe)
        dic[tgsg].append(mfe1)


    df = pd.read_csv('path2_{}'.format(file_name)) #path2 = 'path of files before calculating gh and mfe'

    df = df.set_index('Target')
    df = df.reset_index()


    for idx in df.index:
        sg = df.loc[idx, 'sgRNA']
        tg = df.loc[idx, 'WT_Target']
        sg = tg[:23-int(gn)] +'G'+ sg + tg[-11:]
        df.loc[idx, 'sgRNA2'] = sg


    align_lst = []

    for idx in df.index:
        sg = df.loc[idx, 'sgRNA2'].upper()

        target = df.loc[idx, 'Target'].upper()
        wttg = df.loc[idx, 'WT_Target'].upper()
        tg = target.upper()
        
        pam = target[-11:-8]
        last_tg = target[-8:]
        sg20 = tg[23-int(gn)]

        sgrna = df.loc[idx, 'sgRNA']
        wttg = df.loc[idx, 'WT_Target']
        wtsg = df.loc[idx, 'WT_sgRNA']
        gi = df.loc[idx, 'Guide_Info']
        tt = df.loc[idx, 'Target_Type']
        gt = df.loc[idx, 'Guide_Type']
        tm = df.loc[idx, 'Target_mutation']
        sgwt = 'G' + sgrna.upper() + wttg.upper()

        list_alignments= []

        for alignments in pairwise2.align.globalms(tg, sg, match = 1, mismatch = -1.5, open = -4.21, extend = -4.20):

            ali = []
            ali.append(alignments[0])
            ali.append(alignments[1])
            ali.append(pam)
            ali.append(last_tg)
            ali.append(sg20)

            ali.append(target)
            ali.append(sgrna)
            ali.append(wttg)
            ali.append(wtsg)
            ali.append(gi)
            ali.append(tt)
            ali.append(gt)
            ali.append(tm)
            ali.append(sgwt)
            align_lst.append(ali)


    df_out = pd.DataFrame(align_lst)
    df_out.columns = ['Aligned_Target', 'Aligned_sgRNA', 'PAM', 'Target[-9:]', 'Target20','Target', 'sgRNA', 'WT_Target', 'WT_guide', 'Guide_Info', 'Target_Type1', 'Guide_Type', 'Target_mutation', 'sg+WT'] #, 'opti_deltaGH', 'MFE_GN19', 'MFE_GN19_scaffold']

    for idx in df_out.index:
        
        aligned_tg = df_out.loc[idx, 'Aligned_Target']
        aligned_sg = df_out.loc[idx, 'Aligned_sgRNA']
        
        pam  = df_out.loc[idx, 'PAM'][-2:]
        tg   = df_out.loc[idx, 'Target'].upper()
        sg   = df_out.loc[idx, 'sgRNA'].upper()
        tgsg = tg+sg

        alignment = ''
        matched_seq = ''
        
        mm, rb, db = 0, 0, 0

        
        for t_char, s_char in zip(aligned_tg, aligned_sg):
            if t_char == s_char or (t_char == '-' and s_char == '-'):
                alignment += '|'
            elif t_char == '-':
                alignment += 'R'
            elif s_char == '-':
                alignment += 'D'
            else:
                alignment += 'M'

        cnt_align = alignment[24-gn:-11]
        
        for i in range(0, len(cnt_align)):
            if   cnt_align[i] == '|': pass
            elif cnt_align[i] == 'M': mm += 1
            elif cnt_align[i] == 'R': rb += 1
            elif cnt_align[i] == 'D': db += 1
            else                    : pass
        
        ali    = alignment[23-gn:-11]  # GN19 : 4, GN18 : 5, GN17 : 6, GN16 : 7
        ali_tg = aligned_tg[23-gn:-11] # GN19 : 4, GN18 : 5, GN17 : 6, GN16 : 7
        
        for i in range(0, len(ali)):
            if ali[i] == '|': matched_seq += ali_tg[i]
            
        g_sg = 'G'+ df_out.loc[idx, 'sgRNA'].upper()
        
        # update values
        df_out.loc[idx, 'Alignment'] = alignment
        df_out.loc[idx, 'Counting_Align'] = cnt_align #GN19 : 5, GN18 : 6, GN17 : 7, GN16 : 8
        
        if pam == 'GG': df_out.loc[idx, 'PAM_MUT'] = 0
        else          : df_out.loc[idx, 'PAM_MUT'] = 1 
        
        df_out.loc[idx, 'Counting_Alignment'] = cnt_align
        df_out.loc[idx, 'MM_NUM'] = mm
        df_out.loc[idx, 'RB_NUM'] = rb
        df_out.loc[idx, 'DB_NUM'] = db
        df_out.loc[idx, 'opti_deltaGH'] = dic[tgsg][0]
        df_out.loc[idx, 'MFE_GN19'] = dic[tgsg][1]
        df_out.loc[idx, 'MFE_GN19_scaffold'] = dic[tgsg][2]
        df_out.loc[idx, 'Matched_SEQ'] = matched_seq
        df_out.loc[idx, 'sgRNA_Target_Tm'] = mt.Tm_NN(matched_seq, nn_table=mt.R_DNA_NN1)
        df_out.loc[idx, 'Tm_Spacer'] = mt.Tm_NN(g_sg, nn_table=mt.RNA_NN1)
        df_out.loc[idx, 'Tm_ProtoSpacer'] = mt.Tm_NN(ali_tg, nn_table=mt.DNA_NN1)
        df_out.loc[idx, 'sgRNA'] = g_sg


    df_out['GN'] = 'GN{}'.format(gn)
    df_out['G20'] = df_out['Target20']
    
    df_out = df_out[['Aligned_Target', 'Aligned_sgRNA', 'PAM', 'Target[-9:]', 'Target20',
       'Target', 'sgRNA', 'WT_Target', 'WT_guide', 'Guide_Info',
       'Target_Type1', 'Guide_Type', 'Target_mutation', 'sg+WT', 'Alignment',
       'Counting_Align', 'PAM_MUT', 'Counting_Alignment', 'MM_NUM', 'RB_NUM',
       'DB_NUM', 'opti_deltaGH', 'MFE_GN19', 'MFE_GN19_scaffold',
       'Matched_SEQ', 'sgRNA_Target_Tm', 'Tm_Spacer', 'Tm_ProtoSpacer', 'GN',
       'G20']]

    df_out.to_csv('path for saving files')


    


# path1 = 'path of files after calculating gh and mfe'
# path2 = 'path of files before calculating gh and mfe'

gn = '' # 16, 17, 18, or 19
lst = ['file_name_lst']

with ProcessPoolExecutor(max_workers=10) as executor:
    futs = [executor.submit(align_and_feature_for_DeepCut, file_name, gn) for file_name in lst]
